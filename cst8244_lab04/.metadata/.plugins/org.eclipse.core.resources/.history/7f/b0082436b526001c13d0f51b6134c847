#include <iostream>
#include<sys/wait.h>
#include <pthread.h>
#include <semaphore.h>
#include <fcntl.h>
#include <unistd.h>
using namespace std;
volatile sig_atomic_t usr1Happened = false;
sem_t *sem;
void sigint_handler(int sig);

void* foo(void *arg) {
   cout<<"This is thread: " << pthread_self()<<endl;
}

int main() {
	int i;
	int hRun = 0;
	int nThreads;
	pthread_attr_t attr;
	struct sigaction sa;
	sa.sa_handler = sigint_handler;
	sa.sa_flags = 0;
	sigemptyset(&sa.sa_mask);

	if (sigaction(SIGUSR1, &sa, NULL) == -1) {
		perror("sigaction");
	}

	cout << "Enter the number of Child Threads: ";
	cin >> nThreads;

	sem = sem_open("Lab04_Semaphore", O_CREAT, S_IWOTH, 0);

	for (i = 0; i < nThreads; ++i) {
		pthread_attr_init(&attr);
		cout<<"This is thread: "<< pthread_self()<<endl;
		pthread_create(NULL, &attr, NULL);
		pthread_attr_destroy(&attr);
//		while(hRun!=1){
//
//		}
		nThreads--;
	}

	while (nThreads > 0) {
		if (wait(NULL) > 0) {
			nThreads--;
		}
	}
	cout << "PID = " << getpid() << " : Children finished, parent exiting."<< endl;
	return 0;
}

void sigint_handler(int sig) {
	usr1Happened = 1;
	return;
}

