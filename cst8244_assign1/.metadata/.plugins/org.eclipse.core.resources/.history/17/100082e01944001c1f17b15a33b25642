/**************************************************
 * File: des_inputs.c
 * Authors:
 * Barzin Farahani (040922695)
 * Frederic Desjardins (040941359)
 *
 * Description:
 * This file is the client function of the program,
 * and takes in the inputs that are given to the user it will also prompt
 * a user on what to enter based on what is inputed
 *
 **************************************************/
//Inclues for the file
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sys/neutrino.h>
#include <sys/netmgr.h>
#include <unistd.h>
#include "../../des_controller/src/des.h"
//Function declerations
void getUsrPrompt(char input[4], Person* person);
void getUsrID(Person* person);
void getUsrWeight(Person* person);
/* Function: Main
 * Parameters: Int, Char*
 * Description:
 * The main function for des_inputs file. The main file will
 * use getUsrPrompt,getUsrID, and getUsrWeight. to set the state and get the users inputs.
 */
int main(int argc, char* argv[]) {
	//Member variables
    Person person;
    Display display;
    int errno;
    //Connection Id
    int coid;
    pid_t controller_pid = atoi(argv[1]);

    // Phase 1
    //error checking
    if (argc != 2) {
        printf("ERROR WITH ARG\n");
        exit(EXIT_FAILURE);
    }
    //Setting the default State
    person.state = START_STATE;
    //Connects to the server
    coid = ConnectAttach(ND_LOCAL_NODE, controller_pid, 1, _NTO_SIDE_CHANNEL, 0);
    //If there is a error with the connection return a exit falure
    if(coid == -1){
        printf("ERROR WITH CONNECTION\n");
        exit(EXIT_FAILURE);
    }
    //Outputs what commands a user can enter
    printf("Enter a command [ls= left scan, rs= right scan, ws= weight scale, lo =left open, ro=right open, lc = left closed, rc = right closed , gru = guard right unlock, grl = guard right lock, gll=guard left lock, glu = guard left unlock]\n");
    // Phase 2
    while(1) {
    	//userInput
        char input[4];
        scanf("%s",&input);ws
        //Validate user input
        getUsrPrompt(input, &person);
        // Check if there is a error when the message is sent
        if(MsgSend(coid, &person, sizeof(person), &display, sizeof(display)) == -1){
            printf("ERROR IN MSG SEND\n");
            exit(EXIT_FAILURE);
        } else {
        	//printf("Message sent successfully\n");
        }

        //Checks if Exit State if so then exit
        if(person.state == EXIT_STATE){
            break;
        }
    }
    //Detatches from the server
    sleep(2);
    ConnectDetach(coid);
    return EXIT_SUCCESS;
}
/* Function: getUsrPrompt
 * Parameters: char, Person*
 * Description:
 *  This Function will check the state that the user is in,
 *  and based on what the user inputs it will transsision to said state
 */
void getUsrPrompt(char input[4], Person* person) {
	//Check if the user input is a valid command
    if(strcmp(input,inMessage[LS_INPUT]) == 0){
    	person->state = LS_STATE;
    	getUsrID(person);
    }
    else if(strncmp(input,inMessage[RS_INPUT],strlen(inMessage[RS_INPUT])) == 0){
        person->state = RS_STATE;
        getUsrID(person);
    }
    else if(strncmp(input,inMessage[WS_INPUT],strlen(inMessage[WS_INPUT])) == 0){
        person->state = WS_STATE;
        getUsrWeight(person);
    }
    else if(strncmp(input,inMessage[LO_INPUT],strlen(inMessage[LO_INPUT])) == 0){
        person->state = LO_STATE;
    }
    else if(strncmp(input,inMessage[RO_INPUT],strlen(inMessage[RO_INPUT])) == 0){
        person->state = RO_STATE;
    }
    else if(strncmp(input,inMessage[LC_INPUT],strlen(inMessage[LC_INPUT])) == 0){
        person->state = LC_STATE;
    }
    else if(strncmp(input,inMessage[RC_INPUT],strlen(inMessage[RC_INPUT])) == 0){
        person->state = RC_STATE;
    }
    else if(strncmp(input,inMessage[GLU_INPUT],strlen(inMessage[GLU_INPUT])) == 0){
        person->state = GLU_STATE;
    }
    else if(strncmp(input,inMessage[GRU_INPUT],strlen(inMessage[GRU_INPUT])) == 0){
        person->state = GRU_STATE;
    }
    else if(strncmp(input,inMessage[GLL_INPUT],strlen(inMessage[GLL_INPUT])) == 0){
        person->state = GLL_STATE;
    }
    else if(strncmp(input,inMessage[GRL_INPUT],strlen(inMessage[GRL_INPUT])) == 0){
        person->state = GRL_STATE;
    }
    else if(strncmp(input,inMessage[EXIT_INPUT],strlen(inMessage[EXIT_INPUT])) == 0){
        person->state = EXIT_STATE;
    }

}
/* Function: getUsrID
 * Parameters: Person
 * Description: Prompts for Users ID
 */
void getUsrID(Person* person){
    printf("Enter ID: \n");
    scanf("%d",&person->id);
}

/* Function: getUsrWeight
 * Parameters: Person
 * Description: Prompts for Users Weight
 */
void getUsrWeight(Person* person){
    printf("Enter Weight: \n");
    scanf("%d",&person->weight);
}
